{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pandas import DataFrame as df\n",
    "import numpy as np\n",
    "\n",
    "fileLoc = \"/home/vamsi/Downloads/\"\n",
    "data1 = pd.read_csv(fileLoc+'student-mat.csv')    \n",
    "data2 = pd.read_csv(fileLoc+'student-por.csv')  \n",
    "\n",
    "# Filtering out few rows in dataframe\n",
    "data1 =  data1.loc[~(data1['G3']==0)]\n",
    "data2 =  data2.loc[~(data1['G3']==0)]\n",
    "\n",
    "data = [data1,data2] \n",
    "\n",
    "\n",
    "data1.describe()\n",
    "data1.head()\n",
    "\n",
    "\n",
    "list(data1.columns)\n",
    "\n",
    "\n",
    "#check if need filling data\n",
    "data1.isnull()\n",
    "\n",
    "\n",
    "mod_data1 = data1 \n",
    "binaryYesNo = {'yes': 1, 'no': 0}\n",
    "school_map  = {'MS': 1, 'GP': 2}\n",
    "sex_map     = {'M': 1, 'F': 2}\n",
    "address_map = {'R':1, 'U':2}\n",
    "famsize_map = {'LE3':1, 'GT3':2}\n",
    "pstatus_map = {'A':1, 'T':2}\n",
    "mjob_map    = {'services' : 1, 'health' : 2, 'other' : 3, 'at_home' : 4, 'teacher' : 5}\n",
    "fjob_map    = {'services' : 1, 'health' : 2,  'other' : 3,  'at_home' : 4, 'teacher' : 5}\n",
    "reason_map   = {'course':1, 'other':2, 'reputation':3, 'home':4}\n",
    "guardian_map = {'other':0, 'father':1, 'mother':1}\n",
    "absences_map = {}\n",
    "grades_map = {}\n",
    "\n",
    "#absenties mapping\n",
    "\n",
    "# mapping the no.  of absences into 5 categories of <=5,10, 20, 40, >40\n",
    "\n",
    "for i in xrange((pd.DataFrame.max(data1))['absences']+1):\n",
    "    if i<=5:\n",
    "        absences_map[i] = 0\n",
    "    elif i<=10:\n",
    "        absences_map[i] = 1\n",
    "    elif i<=20:\n",
    "        absences_map[i] = 2\n",
    "    elif i<=40:\n",
    "        absences_map[i] = 3\n",
    "    else:\n",
    "        absences_map[i] = 4\n",
    "        \n",
    "#grade mapping\n",
    "        \n",
    "# max grade is 20\n",
    "\n",
    "maxGrade = 20\n",
    "\n",
    "for i in xrange(maxGrade):\n",
    "    if i <= 5:\n",
    "        grades_map[i] = 0\n",
    "    elif i <= 9:\n",
    "        grades_map[i] = 1\n",
    "    elif i <= 11:\n",
    "        grades_map[i] = 2\n",
    "    elif i<= 13:\n",
    "        grades_map[i] = 3\n",
    "    elif i<= 15:\n",
    "        grades_map[i] = 4\n",
    "    else:\n",
    "        grades_map[i] = 5\n",
    "        \n",
    "#grades_map = {i: if i<=5: 0 elif i <= 9: 1 elif i <= 11: 2 elif i <= 13: 3 elif i <= 15: 4 else: 5 for i in xrange(maxGrade)}\n",
    "\n",
    "mod_data1.schoolsup  = mod_data1.schoolsup.map(binaryYesNo)\n",
    "mod_data1.famsup     = mod_data1.famsup.map(binaryYesNo)\n",
    "mod_data1.paid       = mod_data1.paid.map(binaryYesNo)\n",
    "mod_data1.activities = mod_data1.activities.map(binaryYesNo)\n",
    "mod_data1.nursery    = mod_data1.nursery.map(binaryYesNo)\n",
    "mod_data1.higher     = mod_data1.higher.map(binaryYesNo)\n",
    "mod_data1.internet   = mod_data1.internet.map(binaryYesNo)\n",
    "mod_data1.romantic   = mod_data1.romantic.map(binaryYesNo)\n",
    "mod_data1.school   = mod_data1.school.map(school_map)\n",
    "mod_data1.sex      = mod_data1.sex.map(sex_map)\n",
    "mod_data1.address  = mod_data1.address.map(address_map)\n",
    "mod_data1.famsize  = mod_data1.famsize.map(famsize_map)\n",
    "mod_data1.Pstatus  = mod_data1.Pstatus.map(pstatus_map)\n",
    "mod_data1.Mjob     = mod_data1.Mjob.map(mjob_map)\n",
    "mod_data1.Fjob     = mod_data1.Fjob.map(fjob_map)\n",
    "mod_data1.reason   = mod_data1.reason.map(reason_map)\n",
    "mod_data1.guardian = mod_data1.guardian.map(guardian_map)\n",
    "\n",
    "\n",
    "mod_data1.head()\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lm1 = LinearRegression()\n",
    "\n",
    "\n",
    "#drop the consumption columns\n",
    "X1 = mod_data1.drop('Dalc',axis =1)\n",
    "X = X1.drop('Walc',axis =1)\n",
    "\n",
    "\n",
    "#create new columns for total consumption ‘Talc’\n",
    "mod_data1['Talc'] = mod_data1['Dalc']+mod_data1['Walc']\n",
    "\n",
    "\n",
    "#fit a linear regression model for consumption \n",
    "lm1.fit(X,mod_data1.Walc)\n",
    "\n",
    "\n",
    "#print the coefficient\n",
    "variables = pd.DataFrame(zip(X.columns, lm1.coef_),columns = ['variables', 'estimated_Coefficients'])\n",
    "\n",
    "\n",
    "variables['absolutevalues'] = abs(variables['estimated_Coefficients'])\n",
    "mod_var = variables.sort_values(by = ['absolutevalues'],ascending = False)\n",
    "imp_var = mod_var.head(8)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#fit a linear regression model for Final grade\n",
    "lm2 = LinearRegression()\n",
    "X1 = mod_data1.drop('G1',axis =1)\n",
    "X2 = X1.drop('G2',axis =1)\n",
    "X = X2.drop('G3',axis =1)\n",
    "lm2.fit(X,mod_data1.G3)\n",
    "variables2 = pd.DataFrame(zip(X.columns, lm2.coef_),columns = ['variables', 'estimated_Coefficients'])\n",
    "variables2['absolutevalues'] = abs(variables2['estimated_Coefficients'])\n",
    "mod_var2 = variables2.sort_values(by = ['absolutevalues'],ascending = False)\n",
    "imp_var2 = mod_var2.head(8)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(649, 33)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
